[gd_scene load_steps=58 format=2]

[ext_resource path="res://Texture/3.png" type="Texture" id=1]
[ext_resource path="res://UI/UILayer.gd" type="Script" id=2]
[ext_resource path="res://Texture/2.png" type="Texture" id=3]
[ext_resource path="res://Texture/4.png" type="Texture" id=4]
[ext_resource path="res://Texture/1.png" type="Texture" id=5]
[ext_resource path="res://UI/Game.gd" type="Script" id=6]
[ext_resource path="res://UI/PxBg.gd" type="Script" id=7]
[ext_resource path="res://UI/GameUI.tscn" type="PackedScene" id=8]
[ext_resource path="res://Texture/Pre-made characters/1.png" type="Texture" id=9]
[ext_resource path="res://Texture/Pre-made characters/2.png" type="Texture" id=10]
[ext_resource path="res://Texture/Pre-made characters/3.png" type="Texture" id=11]
[ext_resource path="res://Texture/Pre-made characters/4.png" type="Texture" id=12]
[ext_resource path="res://Texture/Pre-made characters/5.png" type="Texture" id=13]
[ext_resource path="res://Font/mplus_hzk_12.ttf" type="DynamicFontData" id=14]
[ext_resource path="res://icon.png" type="Texture" id=15]
[ext_resource path="res://UI/GameMain.gd" type="Script" id=16]
[ext_resource path="res://Shaders/RimLight.tres" type="Material" id=17]

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 9 )
region = Rect2( 0, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 9 )
region = Rect2( 36, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 9 )
region = Rect2( 72, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 9 )
region = Rect2( 108, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 9 )
region = Rect2( 144, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 9 )
region = Rect2( 180, 0, 36, 24 )

[sub_resource type="SpriteFrames" id=7]
animations = [ {
"frames": [ SubResource( 1 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ) ],
"loop": true,
"name": "default",
"speed": 8.0
} ]

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 10 )
region = Rect2( 0, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 10 )
region = Rect2( 36, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 10 )
region = Rect2( 72, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 10 )
region = Rect2( 108, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 10 )
region = Rect2( 144, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 10 )
region = Rect2( 180, 0, 36, 24 )

[sub_resource type="SpriteFrames" id=14]
animations = [ {
"frames": [ SubResource( 8 ), SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ), SubResource( 13 ) ],
"loop": true,
"name": "default",
"speed": 8.0
} ]

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 11 )
region = Rect2( 0, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 11 )
region = Rect2( 36, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 11 )
region = Rect2( 72, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 11 )
region = Rect2( 108, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 11 )
region = Rect2( 144, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=20]
atlas = ExtResource( 11 )
region = Rect2( 180, 0, 36, 24 )

[sub_resource type="SpriteFrames" id=21]
animations = [ {
"frames": [ SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ) ],
"loop": true,
"name": "default",
"speed": 8.0
} ]

[sub_resource type="AtlasTexture" id=22]
atlas = ExtResource( 12 )
region = Rect2( 0, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=23]
atlas = ExtResource( 12 )
region = Rect2( 36, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=24]
atlas = ExtResource( 12 )
region = Rect2( 72, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 12 )
region = Rect2( 108, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 12 )
region = Rect2( 144, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=27]
atlas = ExtResource( 12 )
region = Rect2( 180, 0, 36, 24 )

[sub_resource type="SpriteFrames" id=28]
animations = [ {
"frames": [ SubResource( 22 ), SubResource( 23 ), SubResource( 24 ), SubResource( 25 ), SubResource( 26 ), SubResource( 27 ) ],
"loop": true,
"name": "default",
"speed": 8.0
} ]

[sub_resource type="AtlasTexture" id=29]
atlas = ExtResource( 13 )
region = Rect2( 0, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=30]
atlas = ExtResource( 13 )
region = Rect2( 36, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=31]
atlas = ExtResource( 13 )
region = Rect2( 72, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=32]
atlas = ExtResource( 13 )
region = Rect2( 108, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=33]
atlas = ExtResource( 13 )
region = Rect2( 144, 0, 36, 24 )

[sub_resource type="AtlasTexture" id=34]
atlas = ExtResource( 13 )
region = Rect2( 180, 0, 36, 24 )

[sub_resource type="SpriteFrames" id=35]
animations = [ {
"frames": [ SubResource( 29 ), SubResource( 30 ), SubResource( 31 ), SubResource( 32 ), SubResource( 33 ), SubResource( 34 ) ],
"loop": true,
"name": "default",
"speed": 8.0
} ]

[sub_resource type="Shader" id=36]
code = "shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + (seed * TIME/12.0), 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + (seed * TIME/12.0), 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=37]
shader = SubResource( 36 )
shader_param/angle = -0.086
shader_param/position = -0.027
shader_param/spread = 0.416
shader_param/cutoff = 0.182
shader_param/falloff = 0.687
shader_param/edge_fade = 0.255
shader_param/speed = 1.162
shader_param/ray1_density = 8.08
shader_param/ray2_density = 30.132
shader_param/ray2_intensity = 0.812
shader_param/color = Color( 0.666667, 0.815686, 0.654902, 0.8 )
shader_param/hdr = true
shader_param/seed = 8.821

[sub_resource type="DynamicFont" id=38]
size = 25
outline_size = 2
outline_color = Color( 0.643137, 0.619608, 0.619608, 1 )
extra_spacing_top = 2
font_data = ExtResource( 14 )

[sub_resource type="Shader" id=39]
code = "shader_type canvas_item;

uniform vec4 in_color:hint_color;
uniform vec4 out_color:hint_color;

uniform float in_out:hint_range(0.,1.)=0.;

uniform float position:hint_range(-1.5,1.) = 0.856;
uniform vec2 size = vec2(16., 16.);

void fragment(){
    vec2 a = (1./SCREEN_PIXEL_SIZE) / size;
    
    vec2 uv=UV;
    uv *= a;
    
    vec2 i_uv = floor(uv);
    vec2 f_uv = fract(uv);
    
    float wave = max(0.,i_uv.x/(a.x) - position);
    
    vec2 center = f_uv*2.-1.;
    float circle = length(center);
    circle = 1. - step(wave,circle);
    
    vec4 color = mix(in_color, out_color, step(0.5, in_out));
    
    COLOR=vec4(circle) * color;
}"

[sub_resource type="ShaderMaterial" id=40]
shader = SubResource( 39 )
shader_param/in_color = Color( 0.25098, 0.47451, 0.517647, 1 )
shader_param/out_color = null
shader_param/in_out = 0.0
shader_param/position = 1.0
shader_param/size = Vector2( 16, 16 )

[node name="Game" type="Node2D"]
script = ExtResource( 6 )

[node name="PxBg" type="Node2D" parent="."]
script = ExtResource( 7 )

[node name="pre" type="Node2D" parent="PxBg"]
visible = false
position = Vector2( 259, 432 )
scale = Vector2( 5, 5 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="PxBg/pre"]
frames = SubResource( 7 )
frame = 2
playing = true

[node name="AnimatedSprite2" type="AnimatedSprite" parent="PxBg/pre"]
position = Vector2( 25.6, 0 )
frames = SubResource( 14 )
frame = 4
playing = true

[node name="AnimatedSprite3" type="AnimatedSprite" parent="PxBg/pre"]
position = Vector2( 54.4, 0 )
frames = SubResource( 21 )
playing = true

[node name="AnimatedSprite4" type="AnimatedSprite" parent="PxBg/pre"]
position = Vector2( 118.4, 0 )
frames = SubResource( 28 )
frame = 5
playing = true

[node name="AnimatedSprite5" type="AnimatedSprite" parent="PxBg/pre"]
position = Vector2( 144, 0 )
frames = SubResource( 35 )
frame = 1
playing = true

[node name="pb1" type="ParallaxBackground" parent="PxBg"]

[node name="ParallaxLayer" type="ParallaxLayer" parent="PxBg/pb1"]
motion_mirroring = Vector2( 1344, 0 )

[node name="img" type="Sprite" parent="PxBg/pb1/ParallaxLayer"]
position = Vector2( 671.614, 158.651 )
scale = Vector2( 6.35, 6 )
texture = ExtResource( 5 )

[node name="pb2" type="ParallaxBackground" parent="PxBg"]

[node name="ParallaxLayer" type="ParallaxLayer" parent="PxBg/pb2"]
motion_mirroring = Vector2( 1344, 0 )

[node name="img" type="Sprite" parent="PxBg/pb2/ParallaxLayer"]
position = Vector2( 673.347, 166 )
scale = Vector2( 6.35, 6 )
texture = ExtResource( 3 )

[node name="pb3" type="ParallaxBackground" parent="PxBg"]

[node name="ParallaxLayer" type="ParallaxLayer" parent="PxBg/pb3"]
motion_mirroring = Vector2( 1344, 0 )

[node name="img" type="Sprite" parent="PxBg/pb3/ParallaxLayer"]
position = Vector2( 673.349, 160.141 )
scale = Vector2( 6.35, 6 )
texture = ExtResource( 1 )

[node name="pb4" type="ParallaxBackground" parent="PxBg"]

[node name="ParallaxLayer" type="ParallaxLayer" parent="PxBg/pb4"]
motion_mirroring = Vector2( 1344, 0 )

[node name="img" type="Sprite" parent="PxBg/pb4/ParallaxLayer"]
position = Vector2( 673.347, 166 )
scale = Vector2( 6.35, 6 )
texture = ExtResource( 4 )

[node name="Light" type="Sprite" parent="."]
material = SubResource( 37 )
position = Vector2( 618.052, 271.317 )
scale = Vector2( 19.3063, 8.98063 )
texture = ExtResource( 15 )
flip_h = true

[node name="GameMain" type="Node2D" parent="."]
script = ExtResource( 16 )

[node name="Position" type="Node2D" parent="GameMain"]

[node name="PositionP1" type="Position2D" parent="GameMain/Position"]
position = Vector2( 550, 498 )

[node name="PositionP2" type="Position2D" parent="GameMain/Position"]
position = Vector2( 345, 498 )

[node name="PositionP3" type="Position2D" parent="GameMain/Position"]
position = Vector2( 138, 498 )

[node name="PositionMoster" type="Node2D" parent="GameMain"]

[node name="PositionM1" type="Position2D" parent="GameMain/PositionMoster"]
position = Vector2( 793, 498 )

[node name="PositionM2" type="Position2D" parent="GameMain/PositionMoster"]
position = Vector2( 995, 498 )

[node name="PositionM3" type="Position2D" parent="GameMain/PositionMoster"]
position = Vector2( 1180, 498 )

[node name="Timer" type="Timer" parent="GameMain"]

[node name="UILayer" type="CanvasLayer" parent="."]
script = ExtResource( 2 )

[node name="Control" parent="UILayer" instance=ExtResource( 8 )]

[node name="msg" type="Label" parent="UILayer"]
visible = false
anchor_right = 1.0
margin_top = 32.0
margin_bottom = 112.0
custom_fonts/font = SubResource( 38 )
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="UILayer/msg"]
wait_time = 2.0
one_shot = true

[node name="Trans" type="Sprite" parent="UILayer"]
visible = false
material = SubResource( 40 )
position = Vector2( 672.125, 309.659 )
scale = Vector2( 20.9961, 9.7294 )
texture = ExtResource( 15 )

[node name="Sprite" type="Sprite" parent="UILayer"]
visible = false
material = ExtResource( 17 )
position = Vector2( 672.125, 311.659 )
scale = Vector2( 20.9961, 9.7919 )
texture = ExtResource( 15 )

[connection signal="timeout" from="GameMain/Timer" to="GameMain" method="_on_Timer_timeout"]
[connection signal="timeout" from="UILayer/msg/Timer" to="UILayer" method="_on_Timer_timeout"]
